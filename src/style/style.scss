//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
    @font-face {
        font-family: $font_name;
        font-display: swap;
        src: url("../fonts/#{$file_name}.woff2") format("woff2"),
        url("../fonts/#{$file_name}.woff") format("woff");
        font-weight: #{$weight};
        font-style: #{$style};
    }
}

//Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;
    @return $result;
}

//REM
@function rem($px) {
    $result: math.div($px, 16)+rem;
    @return $result;
}

//EM
@function em($px, $current: 16) {
    $result: math.div($px, $current)+em;
    @return $result;
}

//Currency
@mixin currency($sym) {
    &::after {
        content: "#{$sym}";
    }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
    display: grid;
    gap: $gap;
    grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }

    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;

    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }

    $flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
    }

    // Устанавливаем значения по умолчанию
    @if $keepSize !=1 and $keepSize !=3 {
        @media (min-width: $widthFromMedia) {
            #{$property}: rem($startSize);
        }
    }

    // Адаптируем размер в промежутке между указанными ширинами вьюпорта
    @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {

        // Если поддерживается clamp();
        @supports (#{$property}: $propertyValue) {
            #{$property}: $propertyValue;
        }

        // Если не поддерживается clamp();
        @supports not (#{$property}: $propertyValue) {
            #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
        }
    }

    @if $keepSize !=1 and $keepSize !=2 {
        @media (max-width: $widthToMedia) {
            #{$property}: rem($minSize);
        }
    }
}

[class*="-ibg"] {
    position: relative;

    img {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        object-fit: cover;
    }
}

[class*="-ibg_contain"] {
    img {
        object-fit: contain;
    }
}

// Шаблоны (заготовки)
// @extend %имя шаблона;
// Сниппет (SCSS): ex

// Счетчик для списка
%listCounter {
    list-style-type: none;
    counter-reset: item;

    li {
        position: relative;

        &:before {
            counter-increment: item;
            content: counter(item);
            position: absolute;
            left: 0;
            top: 0;
        }
    }
}

// Адаптивное видео
%responsiveVideo {
    position: relative;
    overflow: hidden;
    height: 0;
    padding-bottom: 56.25%;

    video,
    iframe,
    object,
    embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

// Видео в качестве фона
%videoBackground {

    video,
    iframe,
    object,
    embed {
        position: fixed;
        top: 50%;
        left: 50%;
        min-width: 100%;
        min-height: 100%;
        width: auto;
        height: auto;
        z-index: -100;
        transform: translateX(-50%) translateY(-50%);
        background-size: cover;
    }
}

// Серый фильтр
%grayfilter {
    transition: all 0.3s ease 0s;
    filter: grayscale(1);

    @media (any-hover: hover) {
        &:hover {
            filter: grayscale(0);
        }
    }
}

// Отменить выделение
%noselect {
    user-select: none;
}

// Зеркальное отображение
%mirror {
    transform: scale(-1, 1);
}

// Плавный скролл
%smoothscroll {
    -webkit-overflow-scrolling: touch;
}

// Скрыть скролл
%hidescroll {
    &::-webkit-scrollbar {
        display: none;
    }
}